name: CI pipeline for YouthBranch API

on:
  push:
    branches:
      - staging
      - main

jobs:
  deploy:
    runs-on: [self-hosted, windows]
    env:
      SERVICE_NAME: "YouthBranchAPI" # Windows Service name
      TARGET_PATH: 'C:\inetpub\wwwroot\youth_branch_api' # folder to deploy to
      ENTRY_FILE: "server.js" # entry relative to TARGET_PATH
      NODE_VERSION: "22" # optional: setup-node version
      HEALTH_URL: "http://localhost:3052/v1/api/cohort/get-all" # optional: e.g. http://localhost:3000/health
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (optional, runner already has Node)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci
        shell: powershell

      - name: Stop service (or kill node if service not found)
        run: |
          $ErrorActionPreference = "Stop"
          $svc = $env:SERVICE_NAME
          if ($svc -and (Get-Service -Name $svc -ErrorAction SilentlyContinue)) {
            Write-Host "Stopping service $svc"
            Stop-Service -Name $svc -Force
            Start-Sleep -Seconds 2
          } else {
            Write-Host "Service $svc not found. Killing node processes (fallback)."
            Get-Process node -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          }
        shell: powershell

      - name: Deploy files to target folder
        run: |
          $t = $env:TARGET_PATH
          if (-not (Test-Path $t)) { New-Item -ItemType Directory -Path $t -Force | Out-Null }
          Write-Host "Backing up .env file if exists"
          $envBackup = Join-Path $t ".env.backup"
          $envTarget = Join-Path $t ".env"
          if (Test-Path $envTarget) {
            Copy-Item -Path $envTarget -Destination $envBackup -Force
          }
          Write-Host "Cleaning target folder $t (keeping node_modules and .env)"
          Get-ChildItem -Path $t -Force -Exclude "node_modules",".env",".env.backup" | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Copying files to $t (excluding node_modules, .git, .github, .env.example)"
          $exclude = @(".git", ".github", "node_modules", ".env.example")
          Get-ChildItem -Path . -Force | Where-Object { $exclude -notcontains $_.Name } | ForEach-Object {
            Copy-Item -Path $_.FullName -Destination $t -Recurse -Force
          }
          Write-Host "Restoring .env file if it was backed up"
          if ((Test-Path $envBackup) -and -not (Test-Path $envTarget)) {
            Move-Item -Path $envBackup -Destination $envTarget -Force
          } elseif (Test-Path $envBackup) {
            Remove-Item -Path $envBackup -Force
          }
        shell: powershell

      - name: Install production dependencies on target
        run: |
          Push-Location $env:TARGET_PATH
          npm ci --omit=dev --ignore-scripts
          Pop-Location
        shell: powershell

      - name: Start service (or start node process)
        run: |
          $ErrorActionPreference = "Stop"
          $svc = $env:SERVICE_NAME
          $entry = Join-Path $env:TARGET_PATH $env:ENTRY_FILE
          if ($svc -and (Get-Service -Name $svc -ErrorAction SilentlyContinue)) {
            Write-Host "Starting service $svc"
            Start-Service -Name $svc
          } else {
            Write-Host "No service found. Starting node process manually (background). Prefer creating a Windows Service with NSSM."
            if (-not (Test-Path $entry)) { Write-Error "Entry file not found: $entry"; exit 1 }
            Start-Process -FilePath "node" -ArgumentList "`"$entry`"" -WindowStyle Hidden
          }
        shell: powershell

      - name: Health check (optional)
        if: ${{ env.HEALTH_URL != '' }}
        run: |
          $url = $env:HEALTH_URL
          $ok = $false
          for ($i=0; $i -lt 6; $i++) {
            try {
              Start-Sleep -Seconds 5
              $r = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 10
              if ($r.StatusCode -ge 200 -and $r.StatusCode -lt 400) { 
                Write-Host "Health check passed: $($r.StatusCode)"
                $ok = $true
                break 
              }
            } catch {
              Write-Host "Health check attempt $($i+1) failed: $($_.Exception.Message)"
            }
          }
          if (-not $ok) { throw "Health check failed after multiple attempts: $url" }
        shell: powershell
